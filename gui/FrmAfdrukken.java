/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import creatie.GeneratePDFRapport;
import creatie.Initialisatie;
import creatie.MailSend;
import databank.DataAdapter;
import databank.dao.CodesDao;
import databank.dao.DenominDao;
import databank.dao.GemorgDao;
import databank.dao.SamenkomDao;
import databank.dao.VerantwDao;
import databank.pojo.Codes;
import databank.pojo.Denomin;
import databank.pojo.Gemorg;
import databank.pojo.Samenkom;
import databank.pojo.Verantw;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.Element;
import javax.swing.text.ElementIterator;
import javax.swing.text.StyleConstants;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.parser.ParserDelegator;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.poi.xwpf.model.XWPFHeaderFooterPolicy;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTFldChar;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTJc;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTP;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTPPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTR;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSectPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTString;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTText;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STFldCharType;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STJc;

/**
 *
 * @author zenodotus
 */
public class FrmAfdrukken extends javax.swing.JFrame {

    
    private DataAdapter drm = new DataAdapter();
    private HTMLDocument htmlDocument;
    private Element bodyElement;
    private int organisatie;
    private ArrayList<String> attachments = new ArrayList<String>();
    
    /**
     * Creates new form FrmAfdrukken
     */
    public FrmAfdrukken() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtUitvoer = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAdressen = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        btnVerzenden = new javax.swing.JButton();
        btnAttachment = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAttachments = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuBestand = new javax.swing.JMenu();
        mnuIndex = new javax.swing.JMenuItem();
        mnuGemeentes = new javax.swing.JMenuItem();
        mnuOrganisaties = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuOpenen = new javax.swing.JMenuItem();
        mnuOpslaan = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        mnuAfsluiten = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        mnuWord = new javax.swing.JMenuItem();
        mnuPDF = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuMaakGids = new javax.swing.JMenuItem();
        mnuAttachments = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        mnuKerken = new javax.swing.JMenuItem();
        mnuLedenKerken = new javax.swing.JMenuItem();
        mnuRegioKerken = new javax.swing.JMenuItem();
        mnuKerkenDenominatie = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        mnuAlleOrganisaties = new javax.swing.JMenuItem();
        mnuLedenOrg = new javax.swing.JMenuItem();
        mnuOrgPerRegio = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        mnuPersonen = new javax.swing.JMenuItem();
        mnuPersPerKerk = new javax.swing.JMenuItem();
        mnuPersPerRegio = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        MnuLijstExporteren = new javax.swing.JMenuItem();
        mnuRapportKerk = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        mnuKerk = new javax.swing.JMenuItem();
        mnuRptRegio = new javax.swing.JMenuItem();
        mnuRptDenom = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        mnuRptAlleKerken = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        mnuRptOrg = new javax.swing.JMenuItem();
        mnuRptRegioOrg = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        mnuRptAlleOrg = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        nnuRapportAllen = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        jMenuItem5.setText("jMenuItem5");

        jMenuItem6.setText("jMenuItem6");

        jMenuItem7.setText("jMenuItem7");

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("jMenu1");

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adressenlijst");
        setName("Adressengids"); // NOI18N

        txtUitvoer.setContentType("text/html"); // NOI18N
        txtUitvoer.setText("");
        txtUitvoer.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtUitvoer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUitvoerKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtUitvoer);

        txtAdressen.setColumns(20);
        txtAdressen.setLineWrap(true);
        txtAdressen.setRows(5);
        txtAdressen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAdressenKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtAdressen);

        jToolBar1.setRollover(true);

        btnVerzenden.setText("Verzenden");
        btnVerzenden.setEnabled(false);
        btnVerzenden.setFocusable(false);
        btnVerzenden.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVerzenden.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVerzenden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerzendenActionPerformed(evt);
            }
        });
        jToolBar1.add(btnVerzenden);

        btnAttachment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/afbeeldingen/attachment.png"))); // NOI18N
        btnAttachment.setToolTipText("Attachment toevoegen");
        btnAttachment.setFocusable(false);
        btnAttachment.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAttachment.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAttachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttachmentActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAttachment);

        jScrollPane3.setViewportView(txtAttachments);

        jLabel1.setText("Attachments");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mnuBestand.setText("Bestand");

        mnuIndex.setText("Index");
        mnuIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIndexActionPerformed(evt);
            }
        });
        mnuBestand.add(mnuIndex);

        mnuGemeentes.setText("gemeentes");
        mnuGemeentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGemeentesActionPerformed(evt);
            }
        });
        mnuBestand.add(mnuGemeentes);

        mnuOrganisaties.setText("Organisaties");
        mnuOrganisaties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOrganisatiesActionPerformed(evt);
            }
        });
        mnuBestand.add(mnuOrganisaties);
        mnuBestand.add(jSeparator2);

        mnuOpenen.setText("Openen");
        mnuOpenen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenenActionPerformed(evt);
            }
        });
        mnuBestand.add(mnuOpenen);

        mnuOpslaan.setText("Opslaan");
        mnuOpslaan.setEnabled(false);
        mnuOpslaan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpslaanActionPerformed(evt);
            }
        });
        mnuBestand.add(mnuOpslaan);
        mnuBestand.add(jSeparator5);

        mnuAfsluiten.setText("Afsluiten");
        mnuAfsluiten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAfsluitenActionPerformed(evt);
            }
        });
        mnuBestand.add(mnuAfsluiten);
        mnuBestand.add(jSeparator4);

        jMenuBar1.add(mnuBestand);

        jMenu2.setText("Exporteren");

        mnuWord.setText("Naar word");
        mnuWord.setEnabled(false);
        mnuWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuWordActionPerformed(evt);
            }
        });
        jMenu2.add(mnuWord);

        mnuPDF.setText("Naar PDF");
        mnuPDF.setEnabled(false);
        mnuPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPDFActionPerformed(evt);
            }
        });
        jMenu2.add(mnuPDF);
        jMenu2.add(jSeparator3);

        mnuMaakGids.setText("Maak Gids");
        mnuMaakGids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMaakGidsActionPerformed(evt);
            }
        });
        jMenu2.add(mnuMaakGids);

        jMenuBar1.add(jMenu2);

        mnuAttachments.setText("Mailings");

        jMenu3.setText("Kerken");

        mnuKerken.setText("Alle kerken");
        mnuKerken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKerkenActionPerformed(evt);
            }
        });
        jMenu3.add(mnuKerken);

        mnuLedenKerken.setText("Leden van de EAV");
        mnuLedenKerken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLedenKerkenActionPerformed(evt);
            }
        });
        jMenu3.add(mnuLedenKerken);

        mnuRegioKerken.setText("via Regio");
        mnuRegioKerken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRegioKerkenActionPerformed(evt);
            }
        });
        jMenu3.add(mnuRegioKerken);

        mnuKerkenDenominatie.setText("Via denominatie");
        mnuKerkenDenominatie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKerkenDenominatieActionPerformed(evt);
            }
        });
        jMenu3.add(mnuKerkenDenominatie);

        mnuAttachments.add(jMenu3);

        jMenu4.setText("Organisaties");

        mnuAlleOrganisaties.setText("Alle organisaties");
        mnuAlleOrganisaties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAlleOrganisatiesActionPerformed(evt);
            }
        });
        jMenu4.add(mnuAlleOrganisaties);

        mnuLedenOrg.setText("Leden van de EAV");
        mnuLedenOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLedenOrgActionPerformed(evt);
            }
        });
        jMenu4.add(mnuLedenOrg);

        mnuOrgPerRegio.setText("Per regio");
        mnuOrgPerRegio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOrgPerRegioActionPerformed(evt);
            }
        });
        jMenu4.add(mnuOrgPerRegio);

        mnuAttachments.add(jMenu4);

        jMenu5.setText("Personen");

        mnuPersonen.setText("Alle personen");
        mnuPersonen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPersonenActionPerformed(evt);
            }
        });
        jMenu5.add(mnuPersonen);

        mnuPersPerKerk.setText("per kerk of organisatie");
        mnuPersPerKerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPersPerKerkActionPerformed(evt);
            }
        });
        jMenu5.add(mnuPersPerKerk);

        mnuPersPerRegio.setText("Per regio");
        mnuPersPerRegio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPersPerRegioActionPerformed(evt);
            }
        });
        jMenu5.add(mnuPersPerRegio);

        mnuAttachments.add(jMenu5);
        mnuAttachments.add(jSeparator6);

        jMenuItem3.setText("Attachment toevoegen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        mnuAttachments.add(jMenuItem3);
        mnuAttachments.add(jSeparator7);

        MnuLijstExporteren.setText("Lijst exporteren");
        MnuLijstExporteren.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnuLijstExporterenActionPerformed(evt);
            }
        });
        mnuAttachments.add(MnuLijstExporteren);

        jMenuBar1.add(mnuAttachments);

        mnuRapportKerk.setText("Rapporten");

        jMenu6.setText("Kerken");

        mnuKerk.setText("per Kerk");
        mnuKerk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKerkActionPerformed(evt);
            }
        });
        jMenu6.add(mnuKerk);

        mnuRptRegio.setText("per regio");
        mnuRptRegio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRptRegioActionPerformed(evt);
            }
        });
        jMenu6.add(mnuRptRegio);

        mnuRptDenom.setText("per denominatie");
        mnuRptDenom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRptDenomActionPerformed(evt);
            }
        });
        jMenu6.add(mnuRptDenom);
        jMenu6.add(jSeparator8);

        mnuRptAlleKerken.setText("Alle kerken");
        mnuRptAlleKerken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRptAlleKerkenActionPerformed(evt);
            }
        });
        jMenu6.add(mnuRptAlleKerken);

        mnuRapportKerk.add(jMenu6);

        jMenu7.setText("Organisaties");

        mnuRptOrg.setText("per Organisatie");
        mnuRptOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRptOrgActionPerformed(evt);
            }
        });
        jMenu7.add(mnuRptOrg);

        mnuRptRegioOrg.setText("per Regio");
        mnuRptRegioOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRptRegioOrgActionPerformed(evt);
            }
        });
        jMenu7.add(mnuRptRegioOrg);
        jMenu7.add(jSeparator9);

        mnuRptAlleOrg.setText("Alle organisaties");
        mnuRptAlleOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRptAlleOrgActionPerformed(evt);
            }
        });
        jMenu7.add(mnuRptAlleOrg);

        mnuRapportKerk.add(jMenu7);
        mnuRapportKerk.add(jSeparator1);

        nnuRapportAllen.setText("Allen");
        nnuRapportAllen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nnuRapportAllenActionPerformed(evt);
            }
        });
        mnuRapportKerk.add(nnuRapportAllen);

        jMenuBar1.add(mnuRapportKerk);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIndexActionPerformed
        
        
        HTMLEditorKit htmlEditorKit = new HTMLEditorKit();
        vulHtmlIndex();
        txtUitvoer.setEditorKit(htmlEditorKit);
        txtUitvoer.setDocument(htmlDocument);
        mnuOpslaan.setEnabled(true);
        mnuWord.setEnabled(true);
        mnuPDF.setEnabled(true);
        
        
        
         
    }//GEN-LAST:event_mnuIndexActionPerformed

    private void vulHtmlIndex() {
        List<Codes> verantwoordelijken;
        organisatie = 0;
        CodesDao codesDao = new CodesDao(drm.getConnection());
        //verantwoordelijken = codesDao.geefAlleVerantwoordelijken();
        String htmlBegin = "<html><body><table border='0' width='100%>";
       
        
        Element bodyElement;
        txtUitvoer.setText("<html><table border='0' width='100%'></table");
        htmlDocument = (HTMLDocument) txtUitvoer.getStyledDocument();
        
        
        //txtUitvoer.setEditorKit(htmlEditorKit);
        //txtUitvoer.setDocument(htmlDocument);

    try {
      Element htmlElement = htmlDocument.getRootElements()[0];
      bodyElement = htmlElement.getElement(0);
    } catch (Exception ex) {
        ex.printStackTrace();
    }
        try {
                
            
        
        for(int i = 0; i < 26; i++) {
            Element e = htmlDocument.getElement(htmlDocument.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.TABLE);


            htmlDocument.insertBeforeEnd(e, "<tr><td colspan='3'><b>" + ((char) (65 + i)) + "</b></td></tr>");
            String test = Character.toString((char) (65 + i)) + "%";
            verantwoordelijken = codesDao.getVerantwoordelijkeAlfabet(test);
            for(int j = 0; j < verantwoordelijken.size(); j++) {
            String naam1 = verantwoordelijken.get(j).getVref().getNaam1() + ", ";
            String voornaam = "";
            if(verantwoordelijken.get(j).getVref().getVoornaam() != null) {
               voornaam = verantwoordelijken.get(j).getVref().getVoornaam() + " ";
            }
            String naam2 = "";
            if(verantwoordelijken.get(j).getVref().getNaam2() != null) {
                naam2 = verantwoordelijken.get(j).getVref().getNaam2();
            }
            String gemeente = "&nbsp;";
            if(verantwoordelijken.get(j).getRefnum().getGemorg().equals("O")) {
                gemeente = verantwoordelijken.get(j).getRefnum().getNaam1();
            } else {
                if (verantwoordelijken.get(j).getRefnum().getSorteer().getSorteer() != null) {
                    gemeente = verantwoordelijken.get(j).getRefnum().getSorteer().getSorteer();
                }
            }
            String telefoon = "&nbsp;";
            if (verantwoordelijken.get(j).getVref().getTelefoon() != null) {
                telefoon = verantwoordelijken.get(j).getVref().getTelefoon();
            }
            String gemorg = verantwoordelijken.get(j).getRefnum().getGemorg();
            int org = 0;
            if(gemorg.equals("G")) {
                org = 2;
            } else if (gemorg.equals("O")) {
                org = 3;
            }
            e = htmlDocument.getElement(htmlDocument.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.TABLE);

            
                htmlDocument.insertBeforeEnd(e, "<tr><td>" + naam1 + " " + voornaam + " " + naam2 + 
                    "</td><td>" + org + "</td><td>" + gemeente + "</td><td>" + telefoon + "</td></tr>");
            }
            
        }

        
        } catch(Exception ex) {
            ex.printStackTrace();
        }
            
    }
    
    private void MaakGidsWord() {
        List<Codes> verantwoordelijken;
        CodesDao codesDao = new CodesDao(drm.getConnection());
        List<String> plaatsen;
        List<Codes> kerken;
        Samenkom samenkomst;
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        SamenkomDao samenkomDao = new SamenkomDao(drm.getConnection());
        plaatsen = gemorgDao.getPlaatsen("G");
        
        
        try {
            XWPFDocument document = new XWPFDocument();
            XWPFTable table = document.createTable();
            table.setWidth(15000);
            table.getCTTbl().getTblPr().unsetTblBorders();
            int aantal = 0;
        for(int i = 0; i < 26; i++) {
            table.createRow();
            table.getRow(aantal).getCell(0).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(6000));
            if(table.getRow(aantal).getCell(0) == null) {
                XWPFTableCell cell = table.getRow(aantal).createCell(); 
                cell.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(6000));
            }
            String test = Character.toString((char) (65 + i));
            table.getRow(aantal).getCell(0).setText("Boldon" + test + "Boldoff");
            aantal++;
            verantwoordelijken = codesDao.getVerantwoordelijkeAlfabet(test + "%");
            for(int j = 0; j < verantwoordelijken.size(); j++) {
            String naam1 = verantwoordelijken.get(j).getVref().getNaam1() + ", ";
            String voornaam = "";
            if(verantwoordelijken.get(j).getVref().getVoornaam() != null) {
               voornaam = verantwoordelijken.get(j).getVref().getVoornaam() + " ";
            }
            String naam2 = "";
            if(verantwoordelijken.get(j).getVref().getNaam2() != null) {
                naam2 = verantwoordelijken.get(j).getVref().getNaam2();
            }
            String cellen[] = new String[4];
            cellen[0] = naam1 + ", " + voornaam + " " + naam2;
            String gemeente = "";
            if(verantwoordelijken.get(j).getRefnum().getGemorg().equals("O")) {
                gemeente = StringEscapeUtils.escapeHtml4(verantwoordelijken.get(j).getRefnum().getNaam1());
            } else {
                if (verantwoordelijken.get(j).getRefnum().getSorteer().getSorteer() != null) {
                    gemeente = StringEscapeUtils.escapeHtml4(verantwoordelijken.get(j).getRefnum().getSorteer().getSorteer());
                }
            }
            cellen[2] = gemeente;
            String telefoon = "";
            if (verantwoordelijken.get(j).getVref().getTelefoon() != null) {
                telefoon = StringEscapeUtils.escapeHtml4(verantwoordelijken.get(j).getVref().getTelefoon());
            }
            cellen[3] = telefoon;
            String gemorg = verantwoordelijken.get(j).getRefnum().getGemorg();
            int org = 0;
            if(gemorg.equals("G")) {
                org = 2;
            } else if (gemorg.equals("O")) {
                org = 3;
            }
            cellen[1] = "" + org;
            table.createRow();
            for(int k = 0; k < 4; k++) {
                //table.getRow(j).getCell(k).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(2000));
                if(table.getRow(aantal).getCell(k) == null) {
                    XWPFTableCell cell = table.getRow(aantal).createCell(); 
                    cell.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(1000));
                }
                table.getRow(aantal).getCell(k).setText(cellen[k]);
                
            }
            aantal++;
            }
        }
        
        /* Begin gemeentes G */
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < plaatsen.size(); i++) {
            XWPFParagraph paragraaf = document.createParagraph();
            
            kerken = codesDao.organisatiesPerPlaats(plaatsen.get(i), "G");
            
            if(!kerken.isEmpty()) {
            
            String plaats = plaatsen.get(i);
            XWPFRun run = paragraaf.createRun();
            run.setText("UndlinBoldon" + plaats + "BoldoffUndoff");
            //run.addBreak();
           
            }
            for (int j = 0; j < kerken.size(); j++) {
                String naamGemeente = kerken.get(j).getRefnum().getNaam1();
                String straatGemeente = kerken.get(j).getRefnum().getStraat();
                String postcodeGemeente = kerken.get(j).getRefnum().getPostcode();
                String woonplGemeente = kerken.get(j).getRefnum().getWoonpl();
                String telefoonGemeente = kerken.get(j).getRefnum().getTelefoon() != null ? kerken.get(j).getRefnum().getTelefoon() : "";
                String emailGemeente = kerken.get(j).getRefnum().getEmail() != null ? kerken.get(j).getRefnum().getEmail() : "";
                String websiteGemeente = kerken.get(j).getRefnum().getWebsite() != null ? kerken.get(j).getRefnum().getWebsite() : "";
                String logoGemeente = kerken.get(j).getDenomin().getLogo();
                samenkomst = samenkomDao.getSamenkomstByRef(kerken.get(j).getRefnum().getRefnum());
                
               /* if((logoGemeente != null) && (logoGemeente == "")) {
                    sb.append("<img src='" + logoGemeente + " width=400px height=400px style='float:left; margin-left:5px'/>");
                }*/
               paragraaf = document.createParagraph();
               XWPFRun run = paragraaf.createRun();
               run.setBold(true);
               run.setText("Boldon" + naamGemeente + "Boldoff");
               run.setBold(false);
               sb.append(naamGemeente);
                if (samenkomst != null) {
                    String dag = samenkomst.getDag();
                    String uur = (samenkomst.getUur().get(GregorianCalendar.HOUR)< 10 ? "0" + samenkomst.getUur().get(GregorianCalendar.HOUR) : samenkomst.getUur().get(GregorianCalendar.HOUR))  + ":" + (samenkomst.getUur().get(GregorianCalendar.MINUTE) < 10 ? "0" + samenkomst.getUur().get(GregorianCalendar.MINUTE) : samenkomst.getUur().get(GregorianCalendar.MINUTE));
                    run.addBreak();
                    run.setText("Samenkomst: " + dag + ": " + uur + "u." );
                    sb.append("Samenkomst: " + dag + " " + uur + "u.");
                }
                run.addBreak();
                run.setText(straatGemeente);
                run.addBreak();
                run.setText(postcodeGemeente + " " + woonplGemeente);
                run.addBreak();
                run.setText("Tel: " + telefoonGemeente);
                run.addBreak();
                run.setText("E-mail: " + emailGemeente);
                run.addBreak();
                run.setText("Website: " + websiteGemeente);
                run.addBreak();
                run.addBreak();
                run.setText("Verantwoordelijken: ");
                run.addBreak();
                run.addBreak();
                    verantwoordelijken = codesDao.getVerantwPerKerk(kerken.get(j).getRefnum().getRefnum(), "G");
                    for (int k = 0; k < verantwoordelijken.size(); k++) {
                       
                String naamVerantw = verantwoordelijken.get(k).getVref().getNaam1();
                String voornaamVerantw = verantwoordelijken.get(k).getVref().getVoornaam() != null ? verantwoordelijken.get(k).getVref().getVoornaam() : "";
                String functie = verantwoordelijken.get(k).getFunccode();
                String straatVerantw = verantwoordelijken.get(k).getVref().getStraat();
                String postcodeVerantw = verantwoordelijken.get(k).getVref().getPostcode();
                String woonplVerantw = verantwoordelijken.get(k).getVref().getWoonpl();
                String telefoonVerantw = verantwoordelijken.get(k).getVref().getTelefoon() != null ? verantwoordelijken.get(k).getVref().getTelefoon() : "";
                String emailVerantw = verantwoordelijken.get(k).getVref().getEmail() != null ? verantwoordelijken.get(k).getVref().getEmail() : "";
                run.setText(naamVerantw + ", " + voornaamVerantw + " (" + functie + ")");
                run.addBreak();
                run.setText(straatVerantw);
                run.addBreak();
                run.setText(postcodeVerantw + " " + woonplVerantw);
                run.addBreak();
                run.setText("Telefoon: " + telefoonVerantw);
                run.addBreak();
                run.setText("E-mail: " + emailVerantw);
                run.addBreak();
                run.addBreak();
                }
                
            
            }
            }
        
        
            //opmaken organisaties
            
            XWPFParagraph paragraaf = document.createParagraph();
            
            kerken = codesDao.organisaties("O");
            
            
            
            for (int j = 0; j < kerken.size(); j++) {
                String naamGemeente = kerken.get(j).getRefnum().getNaam1();
                String straatGemeente = kerken.get(j).getRefnum().getStraat();
                String postcodeGemeente = kerken.get(j).getRefnum().getPostcode();
                String woonplGemeente = kerken.get(j).getRefnum().getWoonpl();
                String telefoonGemeente = kerken.get(j).getRefnum().getTelefoon() != null ? kerken.get(j).getRefnum().getTelefoon() : "";
                String emailGemeente = kerken.get(j).getRefnum().getEmail() != null ? kerken.get(j).getRefnum().getEmail() : "";
                String websiteGemeente = kerken.get(j).getRefnum().getWebsite() != null ? kerken.get(j).getRefnum().getWebsite() : "";
                String logoGemeente = kerken.get(j).getDenomin().getLogo();
                samenkomst = samenkomDao.getSamenkomstByRef(kerken.get(j).getRefnum().getRefnum());
                
               /* if((logoGemeente != null) && (logoGemeente == "")) {
                    sb.append("<img src='" + logoGemeente + " width=400px height=400px style='float:left; margin-left:5px'/>");
                }*/
               paragraaf = document.createParagraph();
               XWPFRun run = paragraaf.createRun();
               run.setText("Boldon" + naamGemeente + "Boldoff");
               sb.append(naamGemeente);
                if (samenkomst != null) {
                    String dag = samenkomst.getDag();
                    String uur = samenkomst.getUur().get(GregorianCalendar.HOUR) + ":" + samenkomst.getUur().get(GregorianCalendar.MINUTE);
                    run.addBreak();
                    run.setText("Samenkomst: " + dag + ":" + uur + "u." );
                    sb.append("Samenkomst: " + dag + " " + uur + "u.");
                }
                run.addBreak();
                run.setText(straatGemeente);
                run.addBreak();
                run.setText(postcodeGemeente + " " + woonplGemeente);
                run.addBreak();
                run.setText("Tel: " + telefoonGemeente);
                run.addBreak();
                run.setText("E-mail: " + emailGemeente);
                run.addBreak();
                run.setText("Website: " + websiteGemeente);
                run.addBreak();
                run.addBreak();
                run.setText("Verantwoordelijken: ");
                run.addBreak();
                run.addBreak();
                    verantwoordelijken = codesDao.getVerantwPerKerk(kerken.get(j).getRefnum().getRefnum(), "O");
                    for (int k = 0; k < verantwoordelijken.size(); k++) {
                       
                String naamVerantw = verantwoordelijken.get(k).getVref().getNaam1();
                String voornaamVerantw = verantwoordelijken.get(k).getVref().getVoornaam() != null ? verantwoordelijken.get(k).getVref().getVoornaam() : "";
                String functie = verantwoordelijken.get(k).getFunccode();
                String straatVerantw = verantwoordelijken.get(k).getVref().getStraat();
                String postcodeVerantw = verantwoordelijken.get(k).getVref().getPostcode();
                String woonplVerantw = verantwoordelijken.get(k).getVref().getWoonpl();
                String telefoonVerantw = verantwoordelijken.get(k).getVref().getTelefoon() != null ? verantwoordelijken.get(k).getVref().getTelefoon() : "";
                String emailVerantw = verantwoordelijken.get(k).getVref().getEmail() != null ? verantwoordelijken.get(k).getVref().getEmail() : "";
                run.setText(naamVerantw + ", " + voornaamVerantw + " (" + functie + ")");
                run.addBreak();
                run.setText(straatVerantw);
                run.addBreak();
                run.setText(postcodeVerantw + " " + woonplVerantw);
                run.addBreak();
                run.setText("Telefoon: " + telefoonVerantw);
                run.addBreak();
                run.setText("E-mail: " + emailVerantw);
                run.addBreak();
                run.addBreak();
                }
                
            
            }
            
            
            
       

        //XWPFDocument document = new XWPFDocument();

        CTSectPr sectPr = document.getDocument().getBody().addNewSectPr();
        XWPFHeaderFooterPolicy policy = new XWPFHeaderFooterPolicy(document, sectPr);

        //write header content
        //CTP ctpHeader = CTP.Factory.newInstance();
        //CTR ctrHeader = ctpHeader.addNewR();
        //CTText ctHeader = ctrHeader.addNewT();
        //String headerText = "FISHER SCIENTIFIC COMPANY L.L.C. DISTRIBUTION AGREEMENT";
        //ctHeader.setStringValue(headerText);    

        //write page number header
        int jaar = new GregorianCalendar().get(GregorianCalendar.YEAR);
        CTP ctpFooter = CTP.Factory.newInstance();
        CTPPr ctppr = ctpFooter.addNewPPr();
        CTString pst = ctppr.addNewPStyle();
        pst.setVal("style21");
        CTJc ctjc = ctppr.addNewJc();
        ctjc.setVal(STJc.RIGHT);
        ctppr.addNewRPr();
        CTR ctr = ctpFooter.addNewR();
        ctr.addNewRPr();
        CTText ctHeader = ctr.addNewT();
        String headerText = "Evangelische adressengids " + (jaar - 1) + "/" + jaar + " - blz. ";
        ctHeader.setStringValue(headerText);   
        CTFldChar fch = ctr.addNewFldChar();
        fch.setFldCharType(STFldCharType.BEGIN);

        ctr = ctpFooter.addNewR();
        ctr.addNewInstrText().setStringValue(" PAGE ");
        
        

        ctpFooter.addNewR().addNewFldChar().setFldCharType(STFldCharType.SEPARATE);

       ctpFooter.addNewR().addNewT().setStringValue("1");

        ctpFooter.addNewR().addNewFldChar().setFldCharType(STFldCharType.END);
        
        //XWPFParagraph headerParagraph = new XWPFParagraph(ctpHeader, document);
        XWPFParagraph footerParagraphPage = new XWPFParagraph(ctpFooter, document);
        XWPFParagraph[] parsFooter = new XWPFParagraph[1];
        //parsHeader[0] = headerParagraph;
        parsFooter[0] = footerParagraphPage;
        policy.createFooter(XWPFHeaderFooterPolicy.DEFAULT, parsFooter);

        


        //run.setText(htmlDocument.getText(0, htmlDocument.getLength()));
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("mw-word bestanden","docx");
        fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        
            if(opslaan == JFileChooser.APPROVE_OPTION) {
        
            FileOutputStream output = new FileOutputStream(fc.getSelectedFile() + ".docx");
                    
            document.write(output);
            
            
    output.close();
            }

        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }
            
        
        
        
    
            
   private void vulHtmlGemeentes(String org) {
    
        List<Codes> verantwoordelijken;
        List<String> plaatsen;
        List<Codes> kerken;
        Samenkom samenkomst;
        organisatie = 1;
        CodesDao codesDao = new CodesDao(drm.getConnection());
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        SamenkomDao samenkomDao = new SamenkomDao(drm.getConnection());
        plaatsen = gemorgDao.getPlaatsen("G");
        Element bodyElement;
        txtUitvoer.setText("<html><p>");
        htmlDocument = (HTMLDocument) txtUitvoer.getStyledDocument();
       try {
            Element htmlElement = htmlDocument.getRootElements()[0];
            bodyElement = htmlElement.getElement(0);
            Element e = htmlDocument.getElement(htmlDocument.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.BODY);
            StringBuffer sb = new StringBuffer();
            if(org.equalsIgnoreCase("G")) {
            for(int i = 0; i < plaatsen.size(); i++) {
            
            
            kerken = codesDao.organisatiesPerPlaats(plaatsen.get(i), org);
            
            if(!kerken.isEmpty()) {
            
            String plaats = plaatsen.get(i);
            sb.append("<h1>" + plaats + "</h1>");
           
            }
            for (int j = 0; j < kerken.size(); j++) {
                String naamGemeente = kerken.get(j).getRefnum().getNaam1();
                String straatGemeente = kerken.get(j).getRefnum().getStraat();
                String postcodeGemeente = kerken.get(j).getRefnum().getPostcode();
                String woonplGemeente = kerken.get(j).getRefnum().getWoonpl();
                String telefoonGemeente = kerken.get(j).getRefnum().getTelefoon() != null ? kerken.get(j).getRefnum().getTelefoon() : "";
                String emailGemeente = kerken.get(j).getRefnum().getEmail() != null ? kerken.get(j).getRefnum().getEmail() : "";
                String websiteGemeente = kerken.get(j).getRefnum().getWebsite() != null ? kerken.get(j).getRefnum().getWebsite() : "";
                String logoGemeente = kerken.get(j).getDenomin().getLogo();
                samenkomst = samenkomDao.getSamenkomstByRef(kerken.get(j).getRefnum().getRefnum());
                sb.append("<p>");
                if((logoGemeente != null) && (logoGemeente == "")) {
                    sb.append("<img src='" + logoGemeente + " width=400px height=400px style='float:left; margin-left:5px'/>");
                }
                sb.append("<b>" + naamGemeente + "</b>");
                if (samenkomst != null) {
                    String dag = samenkomst.getDag();
                    String uur = samenkomst.getUur().get(GregorianCalendar.HOUR) + ":" + samenkomst.getUur().get(GregorianCalendar.MINUTE);
                    sb.append("<br>Samenkomst: " + dag + " " + uur + "u.");
                }
                sb.append("<br>" + straatGemeente + "<br>" + postcodeGemeente + " " + woonplGemeente +
                    "<br>" + "tel: " + telefoonGemeente + "<br>" + "E-mail: " + emailGemeente +
                    "<br>" + "Website: " + websiteGemeente + "</p>" + "</p><p>Verantwoordelijken:<br><br>");
                    verantwoordelijken = codesDao.getVerantwPerKerk(kerken.get(j).getRefnum().getRefnum(), org);
                    for (int k = 0; k < verantwoordelijken.size(); k++) {
                        Element b = htmlDocument.getElement("verantwoordelijken_" + j);
            //Element b = htmlDocument.getElement(htmlDocument.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Attribute.CLASS);
                String naamVerantw = verantwoordelijken.get(k).getVref().getNaam1();
                String voornaamVerantw = verantwoordelijken.get(k).getVref().getVoornaam() != null ? verantwoordelijken.get(k).getVref().getVoornaam() : "";
                String functie = verantwoordelijken.get(k).getFunccode();
                String straatVerantw = verantwoordelijken.get(k).getVref().getStraat();
                String postcodeVerantw = verantwoordelijken.get(k).getVref().getPostcode();
                String woonplVerantw = verantwoordelijken.get(k).getVref().getWoonpl();
                String telefoonVerantw = verantwoordelijken.get(k).getVref().getTelefoon() != null ? verantwoordelijken.get(k).getVref().getTelefoon() : "";
                String emailVerantw = verantwoordelijken.get(k).getVref().getEmail() != null ? verantwoordelijken.get(k).getVref().getEmail() : "";
                System.out.println(naamVerantw);
                sb.append(naamVerantw + " " + voornaamVerantw + " (" + functie + ")" + "<br>" +
                        straatVerantw + "<br>" + postcodeVerantw + " " + woonplVerantw + "<br>" +
                        "Telefoon: " + telefoonVerantw + "<br>E-mail: " + emailVerantw + "<br><br>");
                
                    }
                
            
            }
            }
            } else if (org.equalsIgnoreCase("O")) {
             kerken = codesDao.organisaties(org);
            
            
            for (int j = 0; j < kerken.size(); j++) {
                String naamGemeente = kerken.get(j).getRefnum().getNaam1();
                String straatGemeente = kerken.get(j).getRefnum().getStraat();
                String postcodeGemeente = kerken.get(j).getRefnum().getPostcode();
                String woonplGemeente = kerken.get(j).getRefnum().getWoonpl();
                String telefoonGemeente = kerken.get(j).getRefnum().getTelefoon() != null ? kerken.get(j).getRefnum().getTelefoon() : "";
                String emailGemeente = kerken.get(j).getRefnum().getEmail() != null ? kerken.get(j).getRefnum().getEmail() : "";
                String websiteGemeente = kerken.get(j).getRefnum().getWebsite() != null ? kerken.get(j).getRefnum().getWebsite() : "";
                String logoGemeente = kerken.get(j).getDenomin().getLogo();
                samenkomst = samenkomDao.getSamenkomstByRef(kerken.get(j).getRefnum().getRefnum());
                sb.append("<p>");
                if((logoGemeente != null) && (logoGemeente == "")) {
                    sb.append("<img src='" + logoGemeente + " width=400px height=400px style='float:left; margin-left:5px'/>");
                }
                sb.append("<b>" + naamGemeente + "</b>");
                if (samenkomst != null) {
                    String dag = samenkomst.getDag();
                    String uur = samenkomst.getUur().get(GregorianCalendar.HOUR) + ":" + samenkomst.getUur().get(GregorianCalendar.MINUTE);
                    sb.append("<br>Samenkomst: " + dag + " " + uur + "u.");
                }
                sb.append("<br>" + straatGemeente + "<br>" + postcodeGemeente + " " + woonplGemeente +
                    "<br>" + "tel: " + telefoonGemeente + "<br>" + "E-mail: " + emailGemeente +
                    "<br>" + "Website: " + websiteGemeente + "</p>" + "</p><p>Verantwoordelijken:<br><br>");
                    verantwoordelijken = codesDao.getVerantwPerKerk(kerken.get(j).getRefnum().getRefnum(), org);
                    for (int k = 0; k < verantwoordelijken.size(); k++) {
                        Element b = htmlDocument.getElement("verantwoordelijken_" + j);
            //Element b = htmlDocument.getElement(htmlDocument.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Attribute.CLASS);
                String naamVerantw = verantwoordelijken.get(k).getVref().getNaam1();
                String voornaamVerantw = verantwoordelijken.get(k).getVref().getVoornaam() != null ? verantwoordelijken.get(k).getVref().getVoornaam() : "";
                String functie = verantwoordelijken.get(k).getFunccode();
                String straatVerantw = verantwoordelijken.get(k).getVref().getStraat();
                String postcodeVerantw = verantwoordelijken.get(k).getVref().getPostcode();
                String woonplVerantw = verantwoordelijken.get(k).getVref().getWoonpl();
                String telefoonVerantw = verantwoordelijken.get(k).getVref().getTelefoon() != null ? verantwoordelijken.get(k).getVref().getTelefoon() : "";
                String emailVerantw = verantwoordelijken.get(k).getVref().getEmail() != null ? verantwoordelijken.get(k).getVref().getEmail() : "";
                System.out.println(naamVerantw);
                sb.append(naamVerantw + " " + voornaamVerantw + " (" + functie + ")" + "<br>" +
                        straatVerantw + "<br>" + postcodeVerantw + " " + woonplVerantw + "<br>" +
                        "Telefoon: " + telefoonVerantw + "<br>E-mail: " + emailVerantw + "<br><br>");
                
                    }
                
            
            }
            }   
            
            htmlDocument.insertBeforeEnd(e, sb.toString());
        
        } catch (Exception ex) {
            ex.printStackTrace();
        }        
    }
    
    private void mnuWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuWordActionPerformed
        if(organisatie == 0) {
            maakIndexWordBestand();
        } else if (organisatie == 1) {
            maakAdressenWordBestand();
        }
    }//GEN-LAST:event_mnuWordActionPerformed

    public void maakAdressenWordBestand() {
        XWPFDocument document = new XWPFDocument();
        XWPFParagraph paragraaf;
        htmlDocument = (HTMLDocument) txtUitvoer.getStyledDocument();
        
        
        
        try {
            ElementIterator iterator = new ElementIterator(htmlDocument);
            Element element;
            while ((element = iterator.next()) != null) {
            AttributeSet as = element.getAttributes();
            Object name = as.getAttribute(StyleConstants.NameAttribute);
            int count = 0;
            
            if (name == HTML.Tag.H1) {
                          
                count = element.getElementCount();
                
                int i = 0;
                paragraaf = document.createParagraph();
                for(i = 0; i < count; i++) {
                    
                    Element child = element.getElement(i);
                    int startOffset = child.getStartOffset();
                    int endOffset = child.getEndOffset();
                    int length = endOffset - startOffset;
                    
                    XWPFRun run=paragraaf.createRun();
                    run.setText(htmlDocument.getText(startOffset, length));
                    
                }
            } else if (name == HTML.Tag.P) {
                count = element.getElementCount();
                
                int i = 0;
                paragraaf = document.createParagraph();
                for(i = 0; i < count; i++) {
                    StringBuffer sb = new StringBuffer();
                    Element child = element.getElement(i);
                    int startOffset = child.getStartOffset();
                    int endOffset = child.getEndOffset();
                    int length = endOffset - startOffset;
                    sb.append(htmlDocument.getText(startOffset, length));
                    AttributeSet childAttributes = child.getAttributes();
                    XWPFRun run=paragraaf.createRun();
                    run.setText(sb.toString());
                    if (childAttributes.getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BR)
                  {
                      run.addBreak();
                  }
                    
                
            }
            
            }
            }
        
         CTSectPr sectPr = document.getDocument().getBody().addNewSectPr();
        XWPFHeaderFooterPolicy policy = new XWPFHeaderFooterPolicy(document, sectPr);
            int jaar = new GregorianCalendar().get(GregorianCalendar.YEAR);
        CTP ctpFooter = CTP.Factory.newInstance();
        CTPPr ctppr = ctpFooter.addNewPPr();
        CTString pst = ctppr.addNewPStyle();
        pst.setVal("style21");
        CTJc ctjc = ctppr.addNewJc();
        ctjc.setVal(STJc.RIGHT);
        ctppr.addNewRPr();
        CTR ctr = ctpFooter.addNewR();
        ctr.addNewRPr();
        CTText ctHeader = ctr.addNewT();
        String headerText = "Evangelische adressengids " + (jaar - 1) + "/" + jaar + " - blz. ";
        ctHeader.setStringValue(headerText);   
        CTFldChar fch = ctr.addNewFldChar();
        fch.setFldCharType(STFldCharType.BEGIN);

        ctr = ctpFooter.addNewR();
        ctr.addNewInstrText().setStringValue(" PAGE ");
        
        

        ctpFooter.addNewR().addNewFldChar().setFldCharType(STFldCharType.SEPARATE);

       ctpFooter.addNewR().addNewT().setStringValue("1");

        ctpFooter.addNewR().addNewFldChar().setFldCharType(STFldCharType.END);
        
        //XWPFParagraph headerParagraph = new XWPFParagraph(ctpHeader, document);
        XWPFParagraph footerParagraphPage = new XWPFParagraph(ctpFooter, document);
        XWPFParagraph[] parsFooter = new XWPFParagraph[1];
        //parsHeader[0] = headerParagraph;
        parsFooter[0] = footerParagraphPage;
        policy.createFooter(XWPFHeaderFooterPolicy.DEFAULT, parsFooter);

        


        //run.setText(htmlDocument.getText(0, htmlDocument.getLength()));
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("mw-word bestanden","docx");
        fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        
            if(opslaan == JFileChooser.APPROVE_OPTION) {
        
            FileOutputStream output = new FileOutputStream(fc.getSelectedFile() + ".docx");
                    
            document.write(output);
            
            
            output.close();
            }
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    public void maakIndexWordBestand() {
        XWPFDocument document = new XWPFDocument();
        
        
        htmlDocument = (HTMLDocument) txtUitvoer.getStyledDocument();
     
        try {
            XWPFTable table = document.createTable();
            table.setWidth(2000);
           table.getCTTbl().getTblPr().unsetTblBorders();
            
           //table.getCTTbl().addNewTblGrid().addNewGridCol().setW(BigInteger.valueOf(6000));
           //table.getCTTbl().getTblGrid().addNewGridCol().setW(BigInteger.valueOf(2000));
//          
        
        
        ElementIterator iterator = new ElementIterator(htmlDocument);
        Element element;
        int aantal = 0;
        //XWPFTableRow tableRow= table.createRow();
        //tableRow.createCell();
        //tableRow.createCell();
        
                   
                
                
        while ((element = iterator.next()) != null) {
            AttributeSet as = element.getAttributes();
            Object name = as.getAttribute(StyleConstants.NameAttribute);
            int count = 0;
            
           
            if (name == HTML.Tag.TR) {
                count = element.getElementCount();
                
                int i = 0;
                table.createRow();
                table.getRow(0).getCell(0).getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(2000));
                for(i = 0; i < count; i++) {
                    
                    Element child = element.getElement(i);
                    int startOffset = child.getStartOffset();
                    int endOffset = child.getEndOffset();
                    int length = endOffset - startOffset;
                    if(table.getRow(aantal).getCell(i) == null) {
                        XWPFTableCell cell = table.getRow(aantal).createCell(); 
                        cell.getCTTc().addNewTcPr().addNewTcW().setW(BigInteger.valueOf(1000));
                    }
                   // table.getRow(aantal).createCell();
                  //  CTTblWidth width = table.getCTTbl().addNewTblPr().addNewTblW();

                    //width.setType(STTblWidth.DXA);
                    //width.setW(BigInteger.valueOf(10000));
                    //XWPFParagraph paragraaf = document.createParagraph();
                    //XWPFRun runnen = paragraaf.createRun();
                    //runnen.setText(htmlDocument.getText(startOffset, length));
                    table.getRow(aantal).getCell(i).setText(htmlDocument.getText(startOffset, length));
            

//sb[i][aantal] = new StringBuffer("");
                    //sb[i][aantal].append(htmlDocument.getText(startOffset, length));
                    //table.getRow(aantal).getCell(i).setText(htmlDocument.getText(startOffset, length));
                    // CTTblWidth width = table.getCTTbl().addNewTblPr().addNewTblW();

        //width.setType(STTblWidth.DXA);
        //width.setW(BigInteger.valueOf(7000));
                   // sb.append(htmlDocument.getText(startOffset, length)); 
           
                
            }
                aantal++;
            
        }
        }
       

        //XWPFDocument document = new XWPFDocument();

        CTSectPr sectPr = document.getDocument().getBody().addNewSectPr();
        XWPFHeaderFooterPolicy policy = new XWPFHeaderFooterPolicy(document, sectPr);

        //write header content
        //CTP ctpHeader = CTP.Factory.newInstance();
        //CTR ctrHeader = ctpHeader.addNewR();
        //CTText ctHeader = ctrHeader.addNewT();
        //String headerText = "FISHER SCIENTIFIC COMPANY L.L.C. DISTRIBUTION AGREEMENT";
        //ctHeader.setStringValue(headerText);    

        //write page number header
        int jaar = new GregorianCalendar().get(GregorianCalendar.YEAR);
        CTP ctpFooter = CTP.Factory.newInstance();
        CTPPr ctppr = ctpFooter.addNewPPr();
        CTString pst = ctppr.addNewPStyle();
        pst.setVal("style21");
        CTJc ctjc = ctppr.addNewJc();
        ctjc.setVal(STJc.RIGHT);
        ctppr.addNewRPr();
        CTR ctr = ctpFooter.addNewR();
        ctr.addNewRPr();
        CTText ctHeader = ctr.addNewT();
        String headerText = "Evangelische adressengids " + (jaar - 1) + "/" + jaar + " - blz. ";
        ctHeader.setStringValue(headerText);   
        CTFldChar fch = ctr.addNewFldChar();
        fch.setFldCharType(STFldCharType.BEGIN);

        ctr = ctpFooter.addNewR();
        ctr.addNewInstrText().setStringValue(" PAGE ");
        
        

        ctpFooter.addNewR().addNewFldChar().setFldCharType(STFldCharType.SEPARATE);

       ctpFooter.addNewR().addNewT().setStringValue("1");

        ctpFooter.addNewR().addNewFldChar().setFldCharType(STFldCharType.END);
        
        //XWPFParagraph headerParagraph = new XWPFParagraph(ctpHeader, document);
        XWPFParagraph footerParagraphPage = new XWPFParagraph(ctpFooter, document);
        XWPFParagraph[] parsFooter = new XWPFParagraph[1];
        //parsHeader[0] = headerParagraph;
        parsFooter[0] = footerParagraphPage;
        policy.createFooter(XWPFHeaderFooterPolicy.DEFAULT, parsFooter);

        


        //run.setText(htmlDocument.getText(0, htmlDocument.getLength()));
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("mw-word bestanden","docx");
        fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        
            if(opslaan == JFileChooser.APPROVE_OPTION) {
        
            FileOutputStream output = new FileOutputStream(fc.getSelectedFile() + ".docx");
                    
            document.write(output);
            
            
    output.close();
            }

        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }
    
    
    private void mnuOpslaanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpslaanActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("webbestanden","html");
        fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        try {
            if(opslaan == JFileChooser.APPROVE_OPTION) {
                FileOutputStream output = new FileOutputStream(fc.getSelectedFile()+".html");
                HTMLEditorKit htmlEditorKit = (HTMLEditorKit) txtUitvoer.getEditorKit();
                htmlDocument = (HTMLDocument) txtUitvoer.getStyledDocument();
                htmlEditorKit.write(output, htmlDocument, 0, htmlDocument.getLength());
            }
        } catch(Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_mnuOpslaanActionPerformed

    private void mnuOpenenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenenActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("webbestanden","html");
        fc.setFileFilter(filter);
        int openen = fc.showOpenDialog(this);
        try {
            if(openen == JFileChooser.APPROVE_OPTION) {
                FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                System.out.println("Loading");
                //reader = new FileReader(fc.getSelectedFile().toString());
               
      // Create empty HTMLDocument to read into
                 HTMLEditorKit htmlKit = new HTMLEditorKit();
                 htmlDocument = (HTMLDocument) htmlKit.createDefaultDocument();
      // Create parser (javax.swing.text.html.parser.ParserDelegator)
                HTMLEditorKit.Parser parser = new ParserDelegator();
      // Get parser callback from document
                HTMLEditorKit.ParserCallback callback = htmlDocument.getReader(0);
      // Load it (true means to ignore character set)
                //parser.parse(input, callback, true);
      // Replace document
                htmlKit.read(input, htmlDocument, htmlDocument.getLength());
                txtUitvoer.setEditorKit(htmlKit);
                txtUitvoer.setDocument(htmlDocument);
      System.out.println("Loaded");
      mnuOpslaan.setEnabled(true);
        mnuWord.setEnabled(true);
        mnuPDF.setEnabled(true);
            }

        }    catch (IOException exception) {
            System.out.println("Load oops");
            exception.printStackTrace();
        
      
    } catch(Exception ex) {
        ex.printStackTrace();
    }

    

        
        
    }//GEN-LAST:event_mnuOpenenActionPerformed

    private void mnuGemeentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGemeentesActionPerformed
        HTMLEditorKit htmlEditorKit = new HTMLEditorKit();
        vulHtmlGemeentes("G");
        txtUitvoer.setEditorKit(htmlEditorKit);
        txtUitvoer.setDocument(htmlDocument);
        mnuOpslaan.setEnabled(true);
        mnuWord.setEnabled(true);
        mnuPDF.setEnabled(true);
    }//GEN-LAST:event_mnuGemeentesActionPerformed

    private void mnuOrganisatiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOrganisatiesActionPerformed
        HTMLEditorKit htmlEditorKit = new HTMLEditorKit();
        vulHtmlGemeentes("O");
        txtUitvoer.setEditorKit(htmlEditorKit);
        txtUitvoer.setDocument(htmlDocument);
        mnuOpslaan.setEnabled(true);
        mnuWord.setEnabled(true);
        mnuPDF.setEnabled(true);
    }//GEN-LAST:event_mnuOrganisatiesActionPerformed

    private void mnuMaakGidsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMaakGidsActionPerformed
        MaakGidsWord();
    }//GEN-LAST:event_mnuMaakGidsActionPerformed

    private void mnuAfsluitenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAfsluitenActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_mnuAfsluitenActionPerformed

    private void mnuPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPDFActionPerformed
        if(organisatie == 0) {
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("pdf-bestanden","pdf");
        fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        try {
            if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                GeneratePDFRapport indexRapport = new GeneratePDFRapport();
                indexRapport.indexAfdruk(htmlDocument, fc.getSelectedFile().toString());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        } else if (organisatie == 1) {
        JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("pdf-bestanden","pdf");
        fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        try {
            if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                GeneratePDFRapport indexRapport = new GeneratePDFRapport();
                indexRapport.orgAfdruk(htmlDocument, fc.getSelectedFile().toString());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }   
        }
    }//GEN-LAST:event_mnuPDFActionPerformed

    private void mnuLedenOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLedenOrgActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        List<Gemorg> gemorgs = gemorgDao.geefAlleLeden("O");
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < gemorgs.size(); i++) {
            if(gemorgs.get(i).getEmail() != null) {
                sb.append(gemorgs.get(i).getEmail());
                sb.append("; ");
            }
        }
        txtAdressen.setText(sb.toString());
    }//GEN-LAST:event_mnuLedenOrgActionPerformed

    private void mnuPersonenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPersonenActionPerformed
        VerantwDao verantwDao = new VerantwDao(drm.getConnection());
        List<Verantw> verantwoordelijken = verantwDao.geefAlleVerantwoordelijken();
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < verantwoordelijken.size(); i++) {
            if (verantwoordelijken.get(i).getEmail() != null) {
                sb.append(verantwoordelijken.get(i).getEmail());
                sb.append("; ");
            }
        }
        txtAdressen.setText(sb.toString());
    }//GEN-LAST:event_mnuPersonenActionPerformed

    private void mnuKerkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKerkenActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        List<Gemorg> gemorgs = gemorgDao.geefAlleKerken("G");
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < gemorgs.size(); i++) {
            if(gemorgs.get(i).getEmail() != null) {
                sb.append(gemorgs.get(i).getEmail());
                sb.append("; ");
            }
        }
        txtAdressen.setText(sb.toString());
    }//GEN-LAST:event_mnuKerkenActionPerformed

    private void mnuLedenKerkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLedenKerkenActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        List<Gemorg> gemorgs = gemorgDao.geefAlleLeden("G");
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < gemorgs.size(); i++) {
            if(gemorgs.get(i).getEmail() != null) {
                sb.append(gemorgs.get(i).getEmail());
                sb.append("; ");
            }
        }
    }//GEN-LAST:event_mnuLedenKerkenActionPerformed

    private void mnuRegioKerkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRegioKerkenActionPerformed
           String postcode = (String)JOptionPane.showInputDialog(
                    this,
                    "Geef de postcode op:",
                    "Gegevens analyse",
                    JOptionPane.PLAIN_MESSAGE
                    );
            if (postcode != null && postcode.length() > 0) {
                GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                List<Gemorg> gemorgs = gemorgDao.geefAllePerPostcode("G", postcode);
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < gemorgs.size(); i++) {
                    if(gemorgs.get(i).getEmail() != null) {
                        sb.append(gemorgs.get(i).getEmail());
                        sb.append("; ");
                    }
                }
                txtAdressen.setText(sb.toString());
            }
    }//GEN-LAST:event_mnuRegioKerkenActionPerformed

    private void mnuKerkenDenominatieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKerkenDenominatieActionPerformed
        DenominDao denominDao = new DenominDao(drm.getConnection());
        List<Denomin> denominaties = denominDao.geefAlleDenominaties();
        List<String> namen = new ArrayList<String>();
        for(int i = 0; i < denominaties.size(); i++) {
            namen.add(denominaties.get(i).getNaam1());
        }
        Object[] mogelijkheden = namen.toArray();
       String denominatie = (String)JOptionPane.showInputDialog(
                    this,
                    "Kies de denominatie",
                    "Gegevens analyse",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    mogelijkheden, mogelijkheden[0]
                    );
            if (denominatie != null && denominatie.length() > 0) {
                GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                List<Gemorg> gemorgs = gemorgDao.geefAlleKerkenPerDenominatie("G", denominatie);
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < gemorgs.size(); i++) {
                    if(gemorgs.get(i).getEmail() != null) {
                        sb.append(gemorgs.get(i).getEmail());
                        sb.append("; ");
                    }
                }
                txtAdressen.setText(sb.toString());
            }
    }//GEN-LAST:event_mnuKerkenDenominatieActionPerformed

    private void mnuAlleOrganisatiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAlleOrganisatiesActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        List<Gemorg> gemorgs = gemorgDao.geefAlleKerken("O");
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < gemorgs.size(); i++) {
            if(gemorgs.get(i).getEmail() != null) {
                sb.append(gemorgs.get(i).getEmail());
                sb.append("; ");
            }
        }
        txtAdressen.setText(sb.toString());
    }//GEN-LAST:event_mnuAlleOrganisatiesActionPerformed

    private void mnuOrgPerRegioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOrgPerRegioActionPerformed
        String postcode = (String)JOptionPane.showInputDialog(
                    this,
                    "Geef de postcode op:",
                    "Gegevens analyse",
                    JOptionPane.PLAIN_MESSAGE
                    );
            if (postcode != null && postcode.length() > 0) {
                GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                List<Gemorg> gemorgs = gemorgDao.geefAllePerPostcode("O", postcode);
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < gemorgs.size(); i++) {
                    if(gemorgs.get(i).getEmail() != null) {
                        sb.append(gemorgs.get(i).getEmail());
                        sb.append("; ");
                    }
                }
                txtAdressen.setText(sb.toString());
            }
    }//GEN-LAST:event_mnuOrgPerRegioActionPerformed

    private void mnuPersPerKerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPersPerKerkActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        List<Gemorg> gemorgs = gemorgDao.geefAlleGemorg();
        List<String> namen = new ArrayList<String>();
        for(int i = 0; i < gemorgs.size(); i++) {
            namen.add(gemorgs.get(i).getNaam1());
        }
        Object[] mogelijkheden = namen.toArray();
       String gemorg = (String)JOptionPane.showInputDialog(
                    this,
                    "Kies de kerk",
                    "Gegevens analyse",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    mogelijkheden, mogelijkheden[0]
                    );
            if (gemorg != null && gemorg.length() > 0) {
                CodesDao codesDao = new CodesDao(drm.getConnection());
                List<Codes> verantwoordelijken = codesDao.getVerantwPerKerk(gemorg);
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < verantwoordelijken.size(); i++) {
                    if(verantwoordelijken.get(i).getRefnum().getEmail() != null) {
                        sb.append(verantwoordelijken.get(i).getRefnum().getEmail());
                        sb.append("; ");
                    }
                }
                txtAdressen.setText(sb.toString());
            }
        
    }//GEN-LAST:event_mnuPersPerKerkActionPerformed

    private void mnuPersPerRegioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPersPerRegioActionPerformed
        String postcode = (String)JOptionPane.showInputDialog(
                    this,
                    "Geef de postcode op:",
                    "Gegevens analyse",
                    JOptionPane.PLAIN_MESSAGE
                    );
            if (postcode != null && postcode.length() > 0) {
                VerantwDao verantwDao = new VerantwDao(drm.getConnection());
                List<Verantw> verantwoordelijken = verantwDao.geefAlleVerantwoordelijkenPerRegio(postcode);
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < verantwoordelijken.size(); i++) {
                    if(verantwoordelijken.get(i).getEmail() != null) {
                        sb.append(verantwoordelijken.get(i).getEmail());
                        sb.append("; ");
                    }
                }
                txtAdressen.setText(sb.toString());
            }
    }//GEN-LAST:event_mnuPersPerRegioActionPerformed

    private void txtAdressenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdressenKeyReleased
        if(txtAdressen.getText() == null || txtAdressen.getText().length() <= 0
                || txtUitvoer.getText() == null || txtUitvoer.getText().length() <= 0) {
            btnVerzenden.setEnabled(false);
        } else {
            btnVerzenden.setEnabled(true);
        }
    }//GEN-LAST:event_txtAdressenKeyReleased

    private void txtUitvoerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUitvoerKeyReleased
        if(txtAdressen.getText() == null || txtAdressen.getText().length() <= 0
                || txtUitvoer.getText() == null || txtUitvoer.getText().length() <= 0) {
            btnVerzenden.setEnabled(false);
        } else {
            btnVerzenden.setEnabled(true);
        }
    }//GEN-LAST:event_txtUitvoerKeyReleased

    private void btnVerzendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerzendenActionPerformed
        String[] adressen = txtAdressen.getText().split("; ");
        MailSend mailing = new MailSend(Initialisatie.getGegeven("EMHost"), Initialisatie.getGegeven("Email"), adressen, "Mail van EAV", txtUitvoer.getText());
        mailing.verzend(attachments);
    }//GEN-LAST:event_btnVerzendenActionPerformed

    private void MnuLijstExporterenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnuLijstExporterenActionPerformed
        Writer writer = null;

        try {
            JFileChooser fc = new JFileChooser();
        //FileFilter filter = new FileNameExtensionFilter("pdf-bestanden","pdf");
        //fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        if(opslaan == JFileChooser.APPROVE_OPTION) {
                
                writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(fc.getSelectedFile().toString()), "utf-8"));
                String tekst[] = txtAdressen.getText().split("; ");
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < tekst.length; i++) {
                    sb.append(tekst[i] + "\n");
                }
                writer.write(sb.toString());
            }
            
        } catch (IOException ex) {
  // report
        } finally {
            try {writer.close();} catch (Exception ex) {/*ignore*/}
        }
    }//GEN-LAST:event_MnuLijstExporterenActionPerformed

    private void btnAttachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttachmentActionPerformed
       attachmentToevoegen();
    }//GEN-LAST:event_btnAttachmentActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        attachmentToevoegen();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void mnuKerkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKerkActionPerformed
       GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                List<Gemorg> gemorgs = gemorgDao.geefAlleKerken("G");
                List<String> namen = new ArrayList<String>();
                for (int i = 0; i < gemorgs.size(); i++) {
                    namen.add(gemorgs.get(i).getNaam1());
                }
                Object[] mogelijkheden = namen.toArray();
                String gemorg = (String) JOptionPane.showInputDialog(
                        this,
                        "Kies de kerk",
                        "Gegevens analyse",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        mogelijkheden, mogelijkheden[0]
                );
                if (gemorg != null && gemorg.length() > 0) {
                    afdrukRapport(gemorg);
                    JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int opslaan = fc.showSaveDialog(this);
        try {
            if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                Gemorg gem = gemorgDao.getGemorgByName(gemorg);
                GeneratePDFRapport rapport = new GeneratePDFRapport();
                rapport.rapportAfdruk(fc.getSelectedFile().toString(), gem.getRefnum());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
                
                }
        
    }
    
    private void afdrukRapport(String gemorg) {
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
        Gemorg kerk = gemorgDao.getGemorgByName(gemorg);
        DenominDao denominDao = new DenominDao(drm.getConnection());
        Denomin denominatie = denominDao.getDenominatieByRef(kerk.getDenomin().getDenomin());
        List<Codes> verantwoordelijken;
        List<String> plaatsen;
        List<Codes> kerken;
        Samenkom samenkomst;
        organisatie = 1;
        CodesDao codesDao = new CodesDao(drm.getConnection());
        SamenkomDao samenkomDao = new SamenkomDao(drm.getConnection());
        plaatsen = gemorgDao.getPlaatsen("G");
        Element bodyElement;
        txtUitvoer.setText("<html>");
        htmlDocument = (HTMLDocument) txtUitvoer.getStyledDocument();
       try {
            Element htmlElement = htmlDocument.getRootElements()[0];
            bodyElement = htmlElement.getElement(0);
            Element e = htmlDocument.getElement(htmlDocument.getDefaultRootElement(), StyleConstants.NameAttribute, HTML.Tag.BODY);
            StringBuffer sb = new StringBuffer();
            sb.append("<p><p><b><u>" + kerk.getSorteer().getSorteer() + "</u></b><br><br>");
            sb.append("<b>Correspondentie-gegevens:</b><br><br></p><table border='0'>");
            sb.append("<tr><td>Naam van de gemeente:</td> <td><b>" + kerk.getNaam1() + "</b></td></tr>");
            sb.append("<tr><td>Bijkomende naam-info:</td><td>" + (kerk.getNaam2() != null ? kerk.getNaam2() : "") + "</td></tr>");
            sb.append("<tr><td>Adres van de gemeente:</td><td>" + kerk.getStraat() + "</td></tr>");
            sb.append("<tr><td>Postcode en woonplaats:</td><td>" + kerk.getPostcode() + " " + kerk.getWoonpl() + "</td></tr>");
            sb.append("<tr><td>E-mail:</td><td>" + (kerk.getEmail() != null ? kerk.getEmail() : "") + "</td></tr>");
            sb.append("<tr><td>Website:</td><td>" + (kerk.getWebsite() != null ? kerk.getWebsite() : "") + "<br /></td></tr>");
            sb.append("<tr><td>Lid EAV:</td><td>");
            if(kerk.getEavlid() == 1) {
                sb.append("Ja");
            } else {
                sb.append("Neen");
            }
            sb.append("</td></tr>");
            
            sb.append("<td>Denominatie:</td><td>" + denominatie.getNaam1() + ((denominatie.getNaam2() == null || denominatie.getNaam2().equals("")) ? "" : " " + denominatie.getNaam2()) + "<br></td></tr></table><p>");
            
            sb.append("<b>Bovenstaande gegevens:</b><br>");
            sb.append("<input type='checkbox'value='test'/>Ongewijzigd behouden <input type='checkbox' />Wijzigen <input type='checkbox' />Schrappen<br>");
            sb.append("In geval van wijzigingen, geef de nieuwe gegevens hieronder: </p><table border='0'>");
            sb.append("<tr><td>Naam van de gemeente:</td><td><input type='text' /></td></tr>");
            sb.append("<tr><td>Bijkomende naam-info:</td><td><input type='text' /></td></tr>");
            sb.append("<tr><td>Adres van de gemeente:</td><td><input type='text' /></td></tr>");
            sb.append("<tr><td>Postcode en woonplaats:</td><td><input type='text' /><br></td></tr>");
            sb.append("<tr><td>E-mail:</td><td><input type='text' /></td></tr>");
            sb.append("<tr><td>Website: </td><td><input type='text' /><br></td></tr>");
            sb.append("<tr><td>Lid EAV:</td><td><input type='checkbox' /></td></tr>");
            sb.append("<tr><td>Denominatie:</td><td><input type='text' /></td></tr></table><p>");
            
            samenkomst = samenkomDao.getSamenkomstByRef(kerk.getRefnum());
            if(samenkomst != null) {
                sb.append("<b>Plaats van Samenkomst: </b><br><br>");
                sb.append(samenkomst.getNaam1() + "<br><br>");
            sb.append(samenkomst.getStraat() + "<br>");
            sb.append(samenkomst.getPostcode() + " " + samenkomst.getWoonpl() + "<br>");
            sb.append("Samenkomst: " + samenkomst.getDag() + ", " + samenkomst.getUur().get(GregorianCalendar.HOUR_OF_DAY) + ":" + samenkomst.getUur().get(GregorianCalendar.MINUTE) + " u<br>");
            sb.append("tel.: " + (samenkomst.getTelefoon() != null ? samenkomst.getTelefoon() : "") + "</p>");
            
            sb.append("<p><b>Bovenstaande gegevens: </b><br>");
            sb.append("<input type='checkbox' /> Ongewijzigd behouden <input type='checkbox' />Wijzigen<br>");
            sb.append("In geval van wijzigen, geef de nieuwe gegevens hieronder: </p><table border='0'>");
            sb.append("<tr><td><b>Naam van de kerk:</b></td><td><input type='text' /><br></td></tr>");
            sb.append("<tr><td>Straat:</td><td><input type='text' /></td></tr>");
            sb.append("<tr><td>Postcode en woonplaats:</td><td><input type='text' /></td></tr>");
            sb.append("<tr><td>Samenkomst - dag </td><td><input type='text' /> Tijdstip: <input type='text' /></td></tr>");
            sb.append("<tr><td>Telefoon kerk:</td><td><input type='text' /></td></tr></table><p>");
               
            }
            sb.append("<b>Verantwoordelijken:</b><br><br>");
            verantwoordelijken = codesDao.getVerantwPerKerk(kerk.getNaam1());
            for(int i = 0; i < verantwoordelijken.size(); i++) {
                sb.append("</p><table border='0'><tr><td>Naam:</td><td>" + (verantwoordelijken.get(i).getVref().getTitel() != null ? verantwoordelijken.get(i).getVref().getTitel() + " " : "") + (verantwoordelijken.get(i).getVref().getVoornaam() != null ? verantwoordelijken.get(i).getVref().getVoornaam() + " " : "") + (verantwoordelijken.get(i).getVref().getNaam2() != null ? verantwoordelijken.get(i).getVref().getNaam2() + " " : "") + verantwoordelijken.get(i).getVref().getNaam1() + "</td></tr>");
                sb.append("<tr><td>Adres:</td><td>" + verantwoordelijken.get(i).getVref().getStraat() + "</td></tr>");
                sb.append("<tr><td>Woonplaats:</td><td>" + verantwoordelijken.get(i).getVref().getPostcode() + " " + verantwoordelijken.get(i).getVref().getWoonpl() + "</td></tr>");
                sb.append("<tr><td>Telefoon:</td><td>" + (verantwoordelijken.get(i).getVref().getTelefoon() != null ? verantwoordelijken.get(i).getVref().getTelefoon() : "") + "</td></tr>");
                sb.append("<tr><td>GSM:</td><td>" + (verantwoordelijken.get(i).getVref().getGsm() != null ? verantwoordelijken.get(i).getVref().getGsm() : "") + "</td></tr>");
                sb.append("<tr><td>E-mail:</td><td>" + (verantwoordelijken.get(i).getVref().getEmail() != null ? verantwoordelijken.get(i).getVref().getEmail() : "") + "</td></tr>");
                sb.append("<tr><td>Functie:</td><td>" + verantwoordelijken.get(i).getFunccode() + "</td></tr>");
                if (verantwoordelijken.get(i).getFunccod2() != null && !(verantwoordelijken.get(i).getFunccod2().equals(""))) {
                    sb.append("<tr><td>Functie 2:</td><td>" + verantwoordelijken.get(i).getFunccod2() + "</td></tr>");
                }
                sb.append("</table><p>");
                sb.append("<b>Bovenstaande gegevens:</b><br>");
                sb.append("<input type='checkbox' /> Ongewijzigd behouden <input type='checkbox' /> Wijzigen <input type='checkbox' /> Schrappen<br>");
                sb.append("In geval van wijzigingen, geef de nieuwe gegevens hieronder: </p><table border='0'>");
                sb.append("<tr><td>Naam van de verantwoordelijke:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Bijkomende naam-info:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Adres:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Postcode en gemeente:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Telefoon:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>GSM:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>E-mail:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Functie 1:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Functie 2:</td><td><input type='text' /></td></tr></table>");
            }
            for(int i = 0; i < 4; i++) {
                sb.append("<p><b>Nieuwe gegevens verantwoordelijke toevoegen:</b></p><table border='0'>");
                sb.append("<tr><td>Naam van de verantwoordelijke:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Bijkomende naam-info:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Adres:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Postcode en gemeente:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Telefoon:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>GSM:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>E-mail:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Functie 1:</td><td><input type='text' /></td></tr>");
                sb.append("<tr><td>Functie 2:</td><td><input type='text' /></td></tr></table>");
            }
            sb.append("</p>");
            htmlDocument.insertBeforeEnd(e, sb.toString());
        
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_mnuKerkActionPerformed

    private void mnuRptRegioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRptRegioActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                
                String gemorg = (String) JOptionPane.showInputDialog(
                        this,
                        "Geef de regio",
                        "Gegevensanalyse",
                        JOptionPane.PLAIN_MESSAGE
                );
                if (gemorg != null && gemorg.length() > 0) {
                    List<Gemorg> kerken = gemorgDao.geefAllePerPostcode("G", gemorg);
                    for(int i = 0; i < kerken.size(); i++) {
                        afdrukRapport(kerken.get(i).getNaam1());
                    }
                    int bestanden = JOptionPane.showConfirmDialog(this, "Er zullen " + kerken.size() + " bestanden worden gengeneerd", "bestanden", JOptionPane.INFORMATION_MESSAGE);
                    if(bestanden == JOptionPane.OK_OPTION) {
                        JFileChooser fc = new JFileChooser();
                        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int opslaan = fc.showSaveDialog(this);
                        try {
                        if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                            GeneratePDFRapport rapport = new GeneratePDFRapport();
                            for(int i = 0; i < kerken.size(); i++) {
                                rapport.rapportAfdruk(fc.getSelectedFile().toString(), kerken.get(i).getRefnum());
                            }
                        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                
                }
                }
        
    }//GEN-LAST:event_mnuRptRegioActionPerformed

    private void mnuRptRegioOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRptRegioOrgActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                
                String gemorg = (String) JOptionPane.showInputDialog(
                        this,
                        "Geef de regio",
                        "Gegevensanalyse",
                        JOptionPane.PLAIN_MESSAGE
                );
                if (gemorg != null && gemorg.length() > 0) {
                    List<Gemorg> kerken = gemorgDao.geefAllePerPostcode("O", gemorg);
                    for(int i = 0; i < kerken.size(); i++) {
                        afdrukRapport(kerken.get(i).getNaam1());
                    }
                    int bestanden = JOptionPane.showConfirmDialog(this, "Er zullen " + kerken.size() + " bestanden worden gengeneerd", "bestanden", JOptionPane.INFORMATION_MESSAGE);
                    if(bestanden == JOptionPane.OK_OPTION) {
                        JFileChooser fc = new JFileChooser();
                        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int opslaan = fc.showSaveDialog(this);
                        try {
                        if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                            GeneratePDFRapport rapport = new GeneratePDFRapport();
                            for(int i = 0; i < kerken.size(); i++) {
                                rapport.rapportAfdruk(fc.getSelectedFile().toString(), kerken.get(i).getRefnum());
                            }
                        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                
                }
                }
        
    }//GEN-LAST:event_mnuRptRegioOrgActionPerformed

    private void mnuRptDenomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRptDenomActionPerformed
        DenominDao denominDao = new DenominDao(drm.getConnection());
                List<Denomin> denominaties = denominDao.geefAlleDenominaties();
                List<String> namen = new ArrayList<String>();
                for (int i = 0; i < denominaties.size(); i++) {
                    namen.add(denominaties.get(i).getNaam1());
                }
                Object[] mogelijkheden = namen.toArray();
                String denominatie = (String) JOptionPane.showInputDialog(
                        this,
                        "Kies de denominatie",
                        "Gegevens analyse",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        mogelijkheden, mogelijkheden[0]
                );
                if (denominatie != null && denominatie.length() > 0) {
                    GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                    List<Gemorg> gemorgs = gemorgDao.geefAlleKerkenPerDenominatie("G", denominatie);
                    if(gemorgs.isEmpty()) {
                        JOptionPane.showConfirmDialog(this, "Er is een fout opgetreden bij het verwerken van uw aanvraag\nHebt u rechten om deze inhoud te bekijken?", "Fout bij het uitvoeren", JOptionPane.ERROR_MESSAGE);
                    } else {
                        for(int i = 0; i < gemorgs.size(); i++) {
                        afdrukRapport(gemorgs.get(i).getNaam1());
                        }
                        int bestanden = JOptionPane.showConfirmDialog(this, "Er zullen " + gemorgs.size() + " bestanden worden gengeneerd", "bestanden", JOptionPane.INFORMATION_MESSAGE);
                        if(bestanden == JOptionPane.OK_OPTION) {
                        JFileChooser fc = new JFileChooser();
                        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int opslaan = fc.showSaveDialog(this);
                        try {
                        if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                            GeneratePDFRapport rapport = new GeneratePDFRapport();
                            for(int i = 0; i < gemorgs.size(); i++) {
                                rapport.rapportAfdruk(fc.getSelectedFile().toString(), gemorgs.get(i).getRefnum());
                            }
                        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                
                }
                    }
                }

    }//GEN-LAST:event_mnuRptDenomActionPerformed

    private void mnuRptAlleKerkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRptAlleKerkenActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                    List<Gemorg> gemorgs = gemorgDao.geefAlleKerken("G");
                    if(gemorgs.isEmpty()) {
                        JOptionPane.showConfirmDialog(this, "Er is een fout opgetreden bij het verwerken van uw aanvraag\nHebt u rechten om deze inhoud te bekijken?", "Fout bij het uitvoeren", JOptionPane.ERROR_MESSAGE);
                    } else {
                        for(int i = 0; i < gemorgs.size(); i++) {
                        afdrukRapport(gemorgs.get(i).getNaam1());
                    }
                    int bestanden = JOptionPane.showConfirmDialog(this, "Er zullen " + gemorgs.size() + " bestanden worden gengeneerd", "bestanden", JOptionPane.INFORMATION_MESSAGE);
                    if(bestanden == JOptionPane.OK_OPTION) {
                        JFileChooser fc = new JFileChooser();
                        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);    
                        int opslaan = fc.showSaveDialog(this);
                        try {
                        if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                            GeneratePDFRapport rapport = new GeneratePDFRapport();
                            for(int i = 0; i < gemorgs.size(); i++) {
                                rapport.rapportAfdruk(fc.getSelectedFile().toString(), gemorgs.get(i).getRefnum());
                            }
                        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                
                }
                    }
    }//GEN-LAST:event_mnuRptAlleKerkenActionPerformed

    private void mnuRptOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRptOrgActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                List<Gemorg> gemorgs = gemorgDao.geefAlleKerken("O");
                List<String> namen = new ArrayList<String>();
                for (int i = 0; i < gemorgs.size(); i++) {
                    namen.add(gemorgs.get(i).getNaam1());
                }
                Object[] mogelijkheden = namen.toArray();
                String gemorg = (String) JOptionPane.showInputDialog(
                        this,
                        "Kies de organisatie",
                        "Gegevens analyse",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        mogelijkheden, mogelijkheden[0]
                );
                if (gemorg != null && gemorg.length() > 0) {
                    afdrukRapport(gemorg);
                    JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int opslaan = fc.showSaveDialog(this);
        try {
            if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                Gemorg gem = gemorgDao.getGemorgByName(gemorg);
                GeneratePDFRapport rapport = new GeneratePDFRapport();
                rapport.rapportAfdruk(fc.getSelectedFile().toString(), gem.getRefnum());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
                
                }
    }//GEN-LAST:event_mnuRptOrgActionPerformed

    private void mnuRptAlleOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRptAlleOrgActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                    List<Gemorg> gemorgs = gemorgDao.geefAlleKerken("O");
                    if(gemorgs.isEmpty()) {
                        JOptionPane.showConfirmDialog(this, "Er is een fout opgetreden bij het verwerken van uw aanvraag\nHebt u rechten om deze inhoud te bekijken?", "Fout bij het uitvoeren", JOptionPane.ERROR_MESSAGE);
                    } else {
                        for(int i = 0; i < gemorgs.size(); i++) {
                        afdrukRapport(gemorgs.get(i).getNaam1());
                    }
                    int bestanden = JOptionPane.showConfirmDialog(this, "Er zullen " + gemorgs.size() + " bestanden worden gengeneerd", "bestanden", JOptionPane.INFORMATION_MESSAGE);
                    if(bestanden == JOptionPane.OK_OPTION) {
                        JFileChooser fc = new JFileChooser();
                        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int opslaan = fc.showSaveDialog(this);
                        try {
                        if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                            GeneratePDFRapport rapport = new GeneratePDFRapport();
                            for(int i = 0; i < gemorgs.size(); i++) {
                                rapport.rapportAfdruk(fc.getSelectedFile().toString(), gemorgs.get(i).getRefnum());
                            }
                        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                
                }
                    }
    }//GEN-LAST:event_mnuRptAlleOrgActionPerformed

    private void nnuRapportAllenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nnuRapportAllenActionPerformed
        GemorgDao gemorgDao = new GemorgDao(drm.getConnection());
                    List<Gemorg> gemorgs = gemorgDao.geefAllen();
                    if(gemorgs.isEmpty()) {
                        JOptionPane.showConfirmDialog(this, "Er is een fout opgetreden bij het verwerken van uw aanvraag\nHebt u rechten om deze inhoud te bekijken?", "Fout bij het uitvoeren", JOptionPane.ERROR_MESSAGE);
                    } else {
                        afdrukRapport(gemorgs.get(0).getNaam1());
                        int bestanden = JOptionPane.showConfirmDialog(this, "Er zullen " + gemorgs.size() + " bestanden worden gengeneerd", "bestanden", JOptionPane.INFORMATION_MESSAGE);
                    if(bestanden == JOptionPane.OK_OPTION) {
                        JFileChooser fc = new JFileChooser();
                        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                        int opslaan = fc.showSaveDialog(this);
                        try {
                        if(opslaan == JFileChooser.APPROVE_OPTION) {
                //FileInputStream input = new FileInputStream(fc.getSelectedFile().toString());
                            GeneratePDFRapport rapport = new GeneratePDFRapport();
                            for(int i = 0; i < gemorgs.size(); i++) {
                                
                                rapport.rapportAfdruk(fc.getSelectedFile().toString(), gemorgs.get(i).getRefnum());
                                System.out.println(i + " " + gemorgs.get(i).getRefnum());
                            }
                        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                
                }
                    }
    }//GEN-LAST:event_nnuRapportAllenActionPerformed

    private void attachmentToevoegen() {
        JFileChooser fc = new JFileChooser();
        //FileFilter filter = new FileNameExtensionFilter("pdf-bestanden","pdf");
        //fc.setFileFilter(filter);
        int opslaan = fc.showSaveDialog(this);
        try {
            if(opslaan == JFileChooser.APPROVE_OPTION) {
                attachments.add(fc.getSelectedFile().toString());
                StringBuffer sb = new StringBuffer();
                for(int i = 0; i < attachments.size(); i++) {
                    sb.append(attachments.get(i) + "\n");
                }
                txtAttachments.setText(sb.toString());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }   
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAfdrukken.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAfdrukken.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAfdrukken.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAfdrukken.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAfdrukken().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MnuLijstExporteren;
    private javax.swing.JButton btnAttachment;
    private javax.swing.JButton btnVerzenden;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mnuAfsluiten;
    private javax.swing.JMenuItem mnuAlleOrganisaties;
    private javax.swing.JMenu mnuAttachments;
    private javax.swing.JMenu mnuBestand;
    private javax.swing.JMenuItem mnuGemeentes;
    private javax.swing.JMenuItem mnuIndex;
    private javax.swing.JMenuItem mnuKerk;
    private javax.swing.JMenuItem mnuKerken;
    private javax.swing.JMenuItem mnuKerkenDenominatie;
    private javax.swing.JMenuItem mnuLedenKerken;
    private javax.swing.JMenuItem mnuLedenOrg;
    private javax.swing.JMenuItem mnuMaakGids;
    private javax.swing.JMenuItem mnuOpenen;
    private javax.swing.JMenuItem mnuOpslaan;
    private javax.swing.JMenuItem mnuOrgPerRegio;
    private javax.swing.JMenuItem mnuOrganisaties;
    private javax.swing.JMenuItem mnuPDF;
    private javax.swing.JMenuItem mnuPersPerKerk;
    private javax.swing.JMenuItem mnuPersPerRegio;
    private javax.swing.JMenuItem mnuPersonen;
    private javax.swing.JMenu mnuRapportKerk;
    private javax.swing.JMenuItem mnuRegioKerken;
    private javax.swing.JMenuItem mnuRptAlleKerken;
    private javax.swing.JMenuItem mnuRptAlleOrg;
    private javax.swing.JMenuItem mnuRptDenom;
    private javax.swing.JMenuItem mnuRptOrg;
    private javax.swing.JMenuItem mnuRptRegio;
    private javax.swing.JMenuItem mnuRptRegioOrg;
    private javax.swing.JMenuItem mnuWord;
    private javax.swing.JMenuItem nnuRapportAllen;
    private javax.swing.JTextArea txtAdressen;
    private javax.swing.JTextPane txtAttachments;
    private javax.swing.JTextPane txtUitvoer;
    // End of variables declaration//GEN-END:variables
}
